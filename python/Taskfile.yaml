version: '3'

env:
  SONARQUBE_URL: "http://SONAR_SERVER"
  SONARQUBE_TOKEN: "TOKEN"
  REGISTRY: "ghcr.io"
  REPOSITORY: "intelops"
  IMAGE_NAME: "python-taskfile"
  IMAGE_TAG: "v1"
  TARGET_URL: "http://APPLICATION_DOMAIN"
  ZAP_REPORT: "zap_report.html"

tasks:
  default:
    desc: "Display all tasks"
    cmds:
      - task --list-all

  install-deps:
    desc: "Install Dependencies"
    cmds:
      - pip3 install -r requirements.txt
    preconditions:
      - sh: |
          if [ ! -f requirements.txt ]; then
            echo "requirements.txt not found"
            exit 1
          fi

  lint:
    desc: "Linting the code"
    cmds:
      - pylint **/*.py
    preconditions:
      - sh: |
          if ! command -v pylint &> /dev/null; then
            echo "pylint could not be found"
            exit 1
          fi

  unit-test:
    desc: "Run unit tests"
    cmds:
      - pytest -v -o log_cli=true --log-level=DEBUG
    preconditions:
      - sh: |
          if ! command -v pytest &> /dev/null; then
            echo "pytest could not be found"
            exit 1
          fi

  build:
    desc: "Build Docker Image"
    cmds:
      - docker build -t $REGISTRY/$REPOSITORY/$IMAGE_NAME:$IMAGE_TAG .
    preconditions:
      - sh: |
          if ! command -v docker &> /dev/null; then
            echo "docker could not be found"
            exit 1
          fi

  scan:
    desc: "Scan Docker Image"
    deps: [build]
    cmds:
      - trivy image --exit-code 1 --severity HIGH,CRITICAL $REGISTRY/$REPOSITORY/$IMAGE_NAME:$IMAGE_TAG
    preconditions:
      - sh: |
          if ! command -v trivy &> /dev/null; then
            echo "trivy could not be found"
            exit 1
          fi

  zap:
    desc: "Run OWASP ZAP Scan"
    cmds:
      - docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py -t $TARGET_URL -r $ZAP_REPORT
    preconditions:
      - sh: |
          if ! command -v docker &> /dev/null; then
            echo "docker could not be found"
            exit 1
          fi
    silent: false

  fuzztest:
    desc: "Run the fuzz testing"
    cmds:
      - docker compose build fuzz && docker compose run --service-ports fuzz
  ci:
    desc: "Run full CI pipeline"
    deps: [install-deps, lint, unit-test, scan, zap]
